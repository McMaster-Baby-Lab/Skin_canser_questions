interactionP <- rbind(k, interactionP)
}
View(interactionP)
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 8 & itemSelection != T)
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection != T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1 & itemSelection != T)
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection != T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1 & itemSelection != T
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection != T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
#
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
Agg.table <- cast (Agg, blockname + Alignment ~ ., mean_se, value = "s")
View(Agg.table)
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1 & itemSelection == T
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection == T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg <- rbind(Agg, Agg2)
# Agg0 <- rbind(Agg3, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
Agg.table <- cast (Agg, blockname + Alignment ~ ., mean_se, value = "s")
View(Agg.table)
m <- filter(mydata, (blockname != "Asian50block" &
(MorphingPercent < 50)))
filteredImages <- unique(m$TargetFace)
filteredImages0 <- filteredImages
filteredImages <- colsplit(filteredImages, "_", c("imageID"))
filteredImages$imageName = paste(filteredImages$imageID, "_50_a.bmp", sep = "")
filteredImages <- array(filteredImages$imageName)
filteredImages <- c(filteredImages, filteredImages0)
mydata <- filter(mydata, !TargetFace %in% filteredImages)
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1 & itemSelection == T
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection == T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
#
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
mydata <- read.csv("~/OneDrive - McMaster University/Research/RaceMorph/Exp2a-race_50_32id_20180930.csv", stringsAsFactors = F)
mydata$itemSelection <- mydata$TargetFace %in% filteredImages
mydata2$itemSelection <- mydata2$TargetFace %in% filteredImages
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1 & itemSelection == T
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection == T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
#
Agg <- rbind(Agg, Agg2)
# Agg0 <- rbind(Agg3, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
Agg.table <- cast (Agg, blockname + Alignment ~ ., mean_se, value = "s")
View(Agg.table)
filteredImages
mydata <- read.csv("~/OneDrive - McMaster University/Research/RaceMorph/Exp2a-race_50_32id_20180930.csv", stringsAsFactors = F)
m <- filter(mydata, (blockname != "Asian50block" &
(MorphingPercent < 50)))
filteredImages <- unique(m$TargetFace)
filteredImages0 <- filteredImages
filteredImages <- colsplit(filteredImages, "_", c("imageID"))
filteredImages$imageName = paste(filteredImages$imageID, "_50_a.bmp", sep = "")
filteredImages <- array(filteredImages$imageName)
filteredImages <- c(filteredImages, filteredImages0)
mydata$itemSelection <- mydata$TargetFace %in% filteredImages
mydata2$itemSelection <- mydata2$TargetFace %in% filteredImages
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1 & itemSelection == T
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection == T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
#
Agg <- rbind(Agg, Agg2)
# Agg0 <- rbind(Agg3, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
m <- filter(mydata, (blockname != "Asian50block" &
(MorphingPercent > 50)))
filteredImages <- unique(m$TargetFace)
filteredImages0 <- filteredImages
filteredImages <- colsplit(filteredImages, "_", c("imageID"))
filteredImages$imageName = paste(filteredImages$imageID, "_50_a.bmp", sep = "")
filteredImages <- array(filteredImages$imageName)
filteredImages <- c(filteredImages, filteredImages0)
mydata$itemSelection <- mydata$TargetFace %in% filteredImages
mydata2$itemSelection <- mydata2$TargetFace %in% filteredImages
Agg <- cast(mydata, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1 & itemSelection == T
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + Counterbalance ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & itemSelection == T & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
#
Agg <- rbind(Agg, Agg2)
# Agg0 <- rbind(Agg3, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
Agg.table <- cast (Agg, blockname + Alignment ~ ., mean_se, value = "s")
View(Agg.table)
library(dplyr)
library(tidyr)
library(reshape)
library(ez)
library(ggplot2)
library (apaTables)
mydata <- read.csv("~/OneDrive - McMaster University/Research/RaceMorph/Exp2a-race_50_32id_20180930.csv", stringsAsFactors = F)
width = 1
m <- filter(mydata, (blockname != "Asian50block" &
(MorphingPercent < (50 + width) & MorphingPercent > (50 - width))))
filteredImages <- unique(m$TargetFace)
filteredImages0 <- filteredImages
filteredImages0
imageMorphingRatio <- data.frame(TargetFace = unique(m$TargetFace), MorphingRatio = "50%")
m <- filter(mydata, (blockname != "Asian50block" &
(MorphingPercent > 50)))
imageMorphingRatio1 <- data.frame(TargetFace = unique(m$TargetFace), MorphingRatio = ">50%")
m <- filter(mydata, (blockname != "Asian50block" &
(MorphingPercent < 50)))
imageMorphingRatio2 <- data.frame(TargetFace = unique(m$TargetFace), MorphingRatio = "<50%")
imageMorphingRatio <- rbind(imageMorphingRatio, imageMorphingRatio1, imageMorphingRatio2)
View(imageMorphingRatio)
imageMorphingRatio$blockname <- "Ambiguousblock"
filteredImages <- colsplit(imageMorphingRatio$TargetFace, "_", c("imageID"))
filteredImages$imageName = paste(filteredImages$imageID, "_50_a.bmp", sep = "")
filteredImages <- array(filteredImages$imageName)
filteredImages
imageMorphingRatio0 <- imageMorphingRatio
imageMorphingRatio0$blockname <- "Asian50block"
filteredImages
imageMorphingRatio0$TargetFace <- filteredImages
imageMorphingRatio <- rbind(imageMorphingRatio, imageMorphingRatio0)
View(imageMorphingRatio)
mydata <- merge(mydata, imageMorphingRatio, all.x = T)
# expt2b
mydata2 <- read.csv("~/OneDrive - McMaster University/Research/RaceMorph/Exp2b-32data.csv", stringsAsFactors = F)
mydata2 <- merge(mydata2, imageMorphingRatio, all.x = T)
View(imageMorphingRatio)
Agg <- cast(mydata, Name + blockname + Alignment + MorphingRatio ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + MorphingRatio ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
#
View(Agg)
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
apa.ezANOVA.table (A)
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
696/3
696/12
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
View(Agg)
ezDesign(Agg)
?ezDesign()
ezDesign(Agg, x = .(blockname, Alignment, MorphingRatio), y = s)
ezDesign(Agg, x = "Alignment", y = "MorphingRatio")
names(Agg)
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
apa.ezANOVA.table (A)
View(Agg2)
Agg <- cast(mydata, Name + blockname + Alignment + MorphingRatio ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
apa.ezANOVA.table (A)
A <- ezANOVA (Agg2, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
apa.ezANOVA.table (A)
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg2, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
apa.ezANOVA.table (A)
Agg.table <- cast (Agg, blockname + Alignment + MorphingRatio ~ ., mean_se, value = "s")
ggplot(Agg.table, aes(x = blockname, y, fill = Alignment)) +
geom_bar(stat = "identity", position=position_dodge (.9)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, size = 1, position = position_dodge (.9)) +
scale_x_discrete("") +
scale_y_continuous("Accuracy") +
facet_grid(.~MorphingRatio) +
theme_bw() +
theme(legend.position="right", legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"), legend.key.size = unit(0.4, "cm"),
legend.background = element_rect(colour = "transparent", fill = "white")) +
theme(axis.text = element_text(color = "black", size = 10),
axis.title = element_text(color = "black", size = 12, face = "bold")) +
theme(panel.grid.minor = element_line(color = "white"), panel.grid.major = element_line(color = "white"))
unqiue(Agg.table$MorphingRatio)
unique(Agg.table$MorphingRatio)
Agg.table$MorphingRatio <- factor(Agg.table$MorphingRatio, levels = c("<50%", "50%", ">50%" ))
quartz("", 3.5, 3.5)
ggplot(Agg.table, aes(x = blockname, y, fill = Alignment)) +
geom_bar(stat = "identity", position=position_dodge (.9)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, size = 1, position = position_dodge (.9)) +
scale_x_discrete("") +
scale_y_continuous("Accuracy") +
facet_grid(.~MorphingRatio) +
theme_bw() +
theme(legend.position="right", legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"), legend.key.size = unit(0.4, "cm"),
legend.background = element_rect(colour = "transparent", fill = "white")) +
theme(axis.text = element_text(color = "black", size = 10),
axis.title = element_text(color = "black", size = 12, face = "bold")) +
theme(panel.grid.minor = element_line(color = "white"), panel.grid.major = element_line(color = "white"))
ggsave("~/Desktop/xx.png")
View(Agg)
Agg <- cast(mydata, Name + blockname + Alignment + MorphingRatio ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + MorphingRatio ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
Agg <- cast(mydata, Name + blockname + Alignment + MorphingRatio ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1
& !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
Agg2 <- cast(mydata2, Name + blockname + Alignment + MorphingRatio ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & !Name %in% c("baoxinle", "wangqinrong", "chenlei"))
#
Agg <- rbind(Agg, Agg2)
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment, MorphingRatio), detail = T)
apa.ezANOVA.table (A)
Agg <- cast(mydata, Name + blockname + Alignment ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC", subset = Subject >= 1
& !Name %in% c("baoxinle", "wangqinrong", "chenlei") & MorphingRatio != "50%")
Agg2 <- cast(mydata2, Name + blockname + Alignment ~ Samedifferent,
function(x){sum(x) / length(x)}, value = "Test.ACC",
subset = Subject >= 1 & !Name %in% c("baoxinle", "wangqinrong", "chenlei") & MorphingRatio != "50%")
Agg <- rbind(Agg, Agg2)
Agg$Name <- paste(Agg$Name, rep(1:(nrow(Agg)/4), each = 4), sep="_")
A <- ezANOVA (Agg, dv = s, wid=Name, within = .(blockname, Alignment), detail = T)
apa.ezANOVA.table (A)
Agg.table <- cast (Agg, blockname + Alignment ~ ., mean_se, value = "s")
View(Agg.table)
install.packages(c("gtools", "Matrix", "matrixcalc", "matrixStats", "mgcv", "quantreg", "remotes"))
install.packages(c("gtools", "Matrix", "matrixStats", "mgcv", "mvtnorm", "quantreg"))
install.packages(c("gtools", "Matrix", "matrixStats", "mgcv", "mvtnorm", "quantreg"))
install.packages(c("broom", "gtools", "Matrix", "matrixStats", "mgcv", "mvtnorm", "pander", "quantreg"))
install.packages(c("ggplot2", "gtools", "Matrix", "matrixStats", "mgcv", "mvtnorm", "openxlsx", "pander", "quantreg", "xfun"))
install.packages(c("dplyr", "insight", "lme4"))
install.packages(c("car", "colorspace", "cpp11", "curl", "dplyr", "lavaan", "lme4", "mime", "OpenMx"))
install.packages("OpenMx")
install.packages(c("cli", "interactions", "OpenMx"))
install.packages(c("afex", "bayestestR", "broom", "cli", "emmeans", "isoband", "jmv", "jmvcore", "jpeg", "matrixcalc", "matrixStats", "performance", "pillar", "Rcpp", "RcppArmadillo", "readr", "semTools", "stringi", "tibble", "utf8"))
install.packages("matrixStats")
install.packages(c("haven", "matrixStats", "vroom"))
install.packages(c("haven", "readr", "rpf", "survival", "vroom", "xfun"))
install.packages(c("datawizard", "emmeans", "haven", "insight", "R6", "RCurl", "readr", "rpf", "survival", "xfun"))
install.packages(c("matrixStats", "see", "survival", "tibble"))
install.packages(c("htmltools", "matrixStats", "stringi", "survival", "tibble"))
install.packages(c("bayestestR", "datawizard", "htmltools", "insight", "jtools", "matrixStats", "openssl", "stringi", "survival", "tibble"))
install.packages("openssl")
install.packages(c("cpp11", "data.table", "deSolve", "digest", "gsl", "hms", "knitr", "lattice", "lifecycle", "lsr", "maps", "matrixStats", "mgcv", "mime", "pillar", "psych", "RCurl", "readr", "rJava", "TH.data", "tidyr", "vroom", "xfun"))
install.packages(c("data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "knitr", "lattice", "maps", "matrixStats", "mgcv", "mime", "performance", "PMCMR", "RcppArmadillo", "RCurl", "readr", "remotes", "rJava", "rpf", "see", "stringi", "tibble", "tidyr"))
install.packages(c("mgcv", "sem", "stringi"))
install.packages(c("mgcv", "sem", "stringi"))
install.packages(c("deSolve", "Hmisc", "mgcv", "sem", "stringi"))
install.packages(c("deSolve", "Hmisc", "mgcv", "mvtnorm"))
install.packages(c("arm", "deSolve", "Hmisc", "htmlTable", "igraph", "insight", "MBESS", "mgcv", "mvtnorm", "parameters", "pillar", "rlang", "vcd", "viridis", "xfun"))
install.packages(c("backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "deSolve", "generics", "gsl", "Hmisc", "igraph", "mgcv", "mvtnorm", "nloptr", "rlang", "rpf", "tzdb", "xfun"))
install.packages(c("backports", "bruceR", "glue", "knitr", "Matrix", "openxlsx", "parallelly", "progressr", "RcppArmadillo", "xfun"))
install.packages(c("broom", "bruceR", "carData", "class", "cli", "datawizard", "dplyr", "effectsize", "emmeans", "fansi", "foreach", "foreign", "generics", "glue", "gower", "htmlTable", "insight", "iterators", "jsonlite", "lavaan", "lme4", "magrittr", "MASS", "nlme", "nloptr", "nnet", "parameters", "pillar", "quantreg", "Rcpp", "RcppArmadillo", "rlang", "rpart", "spatial", "tidyr", "yaml"))
install.packages(c("cli", "conquer", "crayon", "dplyr", "insight", "RCurl", "see"))
install.packages(c("cli", "conquer", "crayon", "dplyr", "insight", "RCurl", "see"))
install.packages(c("colorspace", "jsonlite", "yaml"))
install.packages(c("colorspace", "glue", "jsonlite", "mgcv", "yaml"))
install.packages(c("bruceR", "datawizard", "desc", "maptools", "rlang", "survival", "withr", "xfun"))
y
install.packages(c("bruceR", "datawizard", "desc", "maptools", "rlang", "survival", "withr", "xfun"))
install.packages(c("pander", "Rcpp", "waldo"))
library("pwr")
# Proj 1
# Identity, Kelly 2007, 2009
d = 0.92
Proj1Inf <- pwr.t.test(d = d, power = 0.90, type = "one.sample", alternative = "two.sided")
Proj1Inf
pwr.t.test(d = 0.45, power = 0.80, type = "paired.sample", alternative = "two.sided")
pwr.t.test(d = 0.45, power = 0.80, type = "paired", alternative = "two.sided")
pwr.t.test(d = 0.45, n = 25, type = "paired", alternative = "two.sided")
pwr.t.test(d = 0.58, n = 25, type = "paired", alternative = "two.sided")
?pwr.f2.test
pwr.f2.test(u = 1, v = 88, f2 = 7.05, sig.level = 0.05, power = 0.8)
pwr.f2.test(u = 1, v = NULL, f2 = 7.05, sig.level = 0.05, power = 0.8)
pwr.f2.test(u = 1, v = NULL, f2 = 7.05, sig.level = 0.05, power = 0.8)
pwr.f2.test(u = 1, v = NULL, f2 = 0.7, sig.level = 0.05, power = 0.8)
pwr.f2.test(u = 1, v = 88, f2 = 0.7, sig.level = 0.05)
?power.anova.test
pwr.f2.test(u = 1, v = 88, f2 = 0.7/(1-0.7), sig.level = 0.05)
pwr.f2.test(u = 1, v = 85, f2 = 0.5/(1-0.5), sig.level = 0.05)
pwr.f2.test(u = 1, v = 45, f2 = 0.5/(1-0.5), sig.level = 0.05)
library (Rmisc)
library (dplyr)
library (ggplot2)
library (tidyr)
library (ez)
library (reshape)
library (apaTables)
library(ggsignif)
setwd(getwd())
theme_set(theme_bw() +
theme(axis.text = element_text(color = "black", size = 12),
axis.title = element_text(color = "black", size = 12, face = "bold")) +
theme(panel.grid.minor = element_line(color = "white"),
panel.grid.major = element_line(color = "white")) +
theme(legend.title = element_text(color = "black", size = 12, face = "bold"),
legend.box.just = "left",
legend.direction="vertical",
legend.text = element_text(color = "black", size = 12),
legend.key.size = unit(1.5, 'lines'),
legend.background = element_rect(fill = "transparent", colour = "transparent")) +
theme(strip.background = element_rect(fill = "black", colour = "black"),
strip.text = element_text(color = "white", size = 12, face = "bold")) +
theme(text = element_text(family = "Times")))
DStotal <- read.csv("FFI-DS_pair.csv", stringsAsFactors = F)
DStotal <- filter(DStotal, Match == 1)
DS_RT <- cast (DStotal, participant + Gender+ Age  + Country ~., mean, value = "mouse.time")
longResponders <- DS_RT[DS_RT$`(all)` > 3, ]$participant
# DStotal <- filter(DStotal, participant %in% longResponders)
DSAll <- cast (DStotal, participant + Ethnicity +TrialType + Age+ FaceRace + Layout + OO  ~ Response, length, value = "Upper_Image")
DSAll  $Ratio <- DSAll  $`2`/ (DSAll $`1` + DSAll $`2`)
DS <- filter(DSAll, TrialType == "S")
library(effectsize)
by(DS, list(DS$FaceRace, DS$Layout), function(x){t.test(x$Ratio, mu=0.5)})
by(DS, list(DS$FaceRace, DS$Layout), function(y){cohens_d(y$Ratio-0.5)})
install.packages(c("magrittr", "rprojroot", "vctrs"))
install.packages(c("lme4", "RcppEigen"))
install.packages(c("caret", "checkmate", "matrixStats", "sp"))
install.packages(c("caret", "checkmate", "MASS", "matrixStats", "sp"))
install.packages(c("afex", "bayestestR", "car", "checkmate", "cli", "dplyr", "future", "future.apply", "ggplot2", "jtools", "knitr", "MASS", "nloptr", "parallelly", "ps", "quantreg", "Rmisc", "sp", "testthat", "tibble"))
install.packages(c("afex", "bayestestR", "car", "checkmate", "cli", "dplyr", "future", "future.apply", "ggplot2", "jtools", "knitr", "MASS", "nloptr", "parallelly", "ps", "quantreg", "Rmisc", "sp", "testthat", "tibble"))
install.packages(c("afex", "bayestestR", "car", "checkmate", "cli", "dplyr", "future", "future.apply", "ggplot2", "jtools", "knitr", "MASS", "nloptr", "parallelly", "ps", "quantreg", "Rmisc", "sp", "testthat", "tibble"))
install.packages(c("afex", "bayestestR", "car", "checkmate", "cli", "dplyr", "future", "future.apply", "ggplot2", "jtools", "knitr", "MASS", "nloptr", "parallelly", "ps", "quantreg", "Rmisc", "sp", "testthat", "tibble"))
install.packages(c("nloptr", "semTools"))
install.packages(c("insight", "nloptr", "xfun"))
install.packages("nloptr")
install.packages("nloptr")
install.packages(c("bruceR", "parameters"))
install.packages(c("effectsize", "future", "nloptr"))
library(dplyr)
library(tidyr)
library(reshape)
library(ggplot2)
install.packages(c("e1071", "hardhat", "ipred", "mi", "mnormt", "nloptr", "parallelly", "parameters", "progressr", "proxy", "RCurl", "sp"))
install.packages(c("e1071", "hardhat", "mnormt", "processx", "proxy", "RCurl"))
install.packages(c("car", "nlme", "RcppArmadillo", "sandwich"))
install.packages(c("nlme", "RcppArmadillo"))
install.packages(c("nlme", "processx", "ps", "RcppArmadillo"))
install.packages(c("performance", "processx", "ps"))
install.packages("emmeans")
install.packages("globals")
install.packages(c("bruceR", "pkgload", "rlang"))
# this script checks the number of frames for coded sessions.
library(reshape)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("Rating_data_from_China_expt2/")
install.packages(c("broom", "hardhat", "recipes"))
install.packages(c("estimability", "latticeExtra", "lavaan"))
install.packages("ez")
install.packages(c("farver", "generics", "htmlTable", "insight", "lme4", "MBESS", "processx", "Rcpp", "recipes", "stringi"))
install.packages(c("rlang", "stringi"))
install.packages(c("callr", "rlang", "stringi"))
install.packages(c("rlang", "stringi"))
library(dplyr)
library(ggplot2)
library(reshape)
install.packages(c("htmltools", "parallelly", "quantreg", "timeDate"))
install.packages(c("future", "quantreg", "tibble"))
install.packages("tibble")
list.files("~/Desktop/faceAttractivenessLesions/images/")
imgs <- list.files("~/Desktop/faceAttractivenessLesions/images/")
newImags <- gsub("(1)", "", imgs)
newImags <- gsub("(2)", "", imgs)
newImags <- gsub("(3)", "", imgs)
newImags <- gsub("(4)", "", imgs)
newImags <- gsub("(5)", "", imgs)
newImags <- gsub("(6)", "", imgs)
newImags
newImags <- gsub("(3)", "", imgs)
newImags <- gsub("(1)", "", newImags)
newImags <- gsub("(2)", "", newImags)
newImags <- gsub("(4)", "", newImags)
newImags <- gsub("(5)", "", newImags)
newImags <- gsub("(6)", "", newImags)
newImags
newImags <- gsub("'()'", "", newImags)
newImags
newImags <- gsub("(3)", "", imgs)
newImags <- gsub(" ", "", newImags)
newImags
newImags <- gsub("\\(|\\", "", imgs)
newImags <- gsub(" ", "", newImags)
newImags <- gsub("\\(\\", "", imgs)
newImags <- gsub("\\(|)\\", "", imgs)
newImags <- gsub("\\(|\\)", "", imgs)
newImags <- gsub(" ", "", newImags)
newImags
newImags <- gsub("-", "_", newImags)
newImags
newImags <- toupper(newImags)
newImags
newImags <- gsub("NASALTIP", "NASAL_TIP", newImags)
newImags
newImags <- gsub("\\(|\\)", "", imgs)
newImags <- gsub(" ", "", newImags)
newImags <- gsub("-", "_", newImags)
newImags <- toupper(newImags)
newImags <- gsub("_CHEEK", "CHEEK", newImags)
newImags
library("reshape")
x <- colsplit(newImags, "_", c("type"))
View(x)
table(x$type)
newImags <- gsub("LCHEEKCFD", "LCHEEKC_FD", newImags)
newImags <- gsub("NASAL_TIP", "NASALTIP", newImags)
table(x$type)
newImags <- gsub("LCHEEKCFD", "LCHEEK_CFD", newImags)
newImags <- gsub("\\(|\\)", "", imgs)
newImags <- gsub(" ", "", newImags)
newImags <- gsub("-", "_", newImags)
newImags <- toupper(newImags)
newImags <- gsub("_CHEEK", "CHEEK", newImags)
newImags <- gsub("LCHEEKCFD", "LCHEEK_CFD", newImags)
newImags <- gsub("NASAL_TIP", "NASALTIP", newImags)
newImags
x <- colsplit(newImags, "_", c("type"))
table(x$type)
x$image <- paste(x$NA., x$NA..1, x$NA..2, x$NA..4, x$NA..4, sep = "_")
table(x$image)
x$image <- paste(x$NA., x$NA..1, x$NA..2, x$NA..3, x$NA..4, sep = "_")
table(x$image)
write.csv(x, "~/Desktop/files.csv", row.names = F)
newImags <- gsub("1.PNG", ".png", newImags)
newImags <- gsub("2.png", ".png", newImags)
newImags <- gsub("3.png", ".png", newImags)
newImags <- gsub("4.png", ".png", newImags)
x <- colsplit(newImags, "_", c("type"))
table(x$type)
x$image <- paste(x$NA., x$NA..1, x$NA..2, x$NA..3, x$NA..4, sep = "_")
table(x$image)
newImags <- gsub("2.PNG", ".png", newImags)
newImags <- gsub("3.PNG", ".png", newImags)
newImags <- gsub("4.PNG", ".png", newImags)
x <- colsplit(newImags, "_", c("type"))
table(x$type)
x$image <- paste(x$NA., x$NA..1, x$NA..2, x$NA..3, x$NA..4, sep = "_")
table(x$image)
newImags <- gsub(".PNG", ".png", newImags)
x <- colsplit(newImags, "_", c("type"))
table(x$type)
x$image <- paste(x$NA., x$NA..1, x$NA..2, x$NA..3, x$NA..4, sep = "_")
table(x$image)
newImags <- gsub("\\(|\\)", "", imgs)
newImags <- gsub(" ", "", newImags)
newImags <- gsub("-", "_", newImags)
newImags <- toupper(newImags)
newImags <- gsub("_CHEEK", "CHEEK", newImags)
newImags <- gsub("LCHEEKCFD", "LCHEEK_CFD", newImags)
newImags <- gsub("NASAL_TIP", "NASALTIP", newImags)
newImags <- gsub("1.PNG", ".png", newImags)
newImags <- gsub("2.PNG", ".png", newImags)
newImags <- gsub("3.PNG", ".png", newImags)
newImags <- gsub("4.PNG", ".png", newImags)
newImags <- gsub("5.PNG", ".png", newImags)
newImags <- gsub(".PNG", ".png", newImags)
x <- colsplit(newImags, "_", c("type"))
table(x$type)
x$image <- paste(x$NA., x$NA..1, x$NA..2, x$NA..3, x$NA..4, sep = "_")
table(x$image)
write.csv(x, "~/Desktop/files.csv", row.names = F)
setwd("~/Desktop/faceAttractivenessLesions/images/")
file.rename(imgs, newImags)
unique(x$image)
unique(x$type)
